#!/bin/bash

set -e

# Export PAIR variables
export PAIR_HOME=/app/fs/home
export PAIR_APP=/app/app
export PAIR_CONF=$PAIR_APP/pair
export PAIR_PROFILE=$PAIR_CONF/profile
export PAIR_SETUP=$PAIR_CONF/setup
export PAIR_UPDATE=$PAIR_CONF/update
export PAIR_START=$PAIR_CONF/start

function do_start() {
    assert_not_started
    assert_init
    assert_setup
    change_home

    # Prep is done
    source $PAIR_START
}

function do_setup() {
    assert_init
    assert_not_setup
    change_home
    source $PAIR_SETUP
}

function do_update() {
    assert_init
    assert_setup
    change_home
    source $PAIR_UPDATE
}

function do_delete() {
    find $PAIR_HOME -mindepth 1 -delete
}

#------------------------------------------------------------------------------
function is_setup() {
    # Check is setup has happened
    if [[ `ls -a $PAIR_HOME | grep -c '.'` -gt 2 ]]; then
        echo 1
    fi
}

function change_home() {
    # Switch HOME dirs
    export HOME=$PAIR_HOME
    cd
}

#------------------------------------------------------------------------------
function assert_not_started() {
    # Check if already started
    if [[ -n "$PAIR_STARTED" ]]; then
        echo "You are already inside a pair session."
        exit 1
    fi
    export PAIR_STARTED=1
}

function assert_init() {
    if [[ ! -d $PAIR_CONF ]]; then
        cat <<EOS
'$PAIR_CONF' does not exist.

Try a command like this one:

    git clone git@github.com:ingydotnet/example-pair.git pair

EOS
        exit 1
    fi
    [[ -f $PAIR_PROFILE ]] && source $PAIR_PROFILE
}

function assert_setup {
    if [[ -z $(is_setup) ]]; then
        cat <<EOS
Pair environment not set up.
Run 'pair setup' first.
EOS
        exit 1
    fi
}

function assert_not_setup {
    if [[ -n $(is_setup) ]]; then
        cat <<EOS
Pair environment already set up.
Run 'pair delete' if you want to start over.
EOS
        exit 1
    fi
}

#------------------------------------------------------------------------------

[[ -n "$1" ]] && command=$1 || command="start"
do_$command
