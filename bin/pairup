#!/bin/bash

# set -ex
set -e

# Set PAIRUP variables
PAIRUP_HOME=/home/pairup
PAIRUP_USER=stackato
PAIRUP_GROUP=stackato
PAIRUP_APP=/app/app
PAIRUP_CONF=pairup-conf.sh
PAIRUP_UPDATE=$PAIRUP_CONF/update
PAIRUP_START=$PAIRUP_CONF/start

function do_help() {
    cat <<EOS
Usage:
    pairup conf [<dot-confs-repo>]         - Choose PairUp! configuration
    stackato push <pairup-session-name>    - Create a new PairUp! container
    pairup ssh <pairup-session-name>       - ssh to container (w/ ForwardAgent)
    pairup init                            - First time setup
    pairup [start]                         - Enter the PairUp! tmux session
    pairup update                          - Install all the conf software
    help                                   - Show this message

EOS
}

function do_ssh() {
    if [[ -z "$arg1" ]]; then
        echo "PairUp! session name required"
        exit 1
    fi

    grep ForwardAgent ~/.ssh/config > /dev/null || cat <<EOT
You probably want this in your ~/.ssh/config:

Host *
    ForwardAgent yes

...or else the repos you check out on your PairUp! session will have a hard
time "push"ing like you're used to.

(Connecting anyway...)
EOT

    bash -c "$(stackato ssh --dry-run $arg1)"
}

function do_conf() {
    if [[ -n "$arg1" ]]; then
        conf=$arg1
    elif [[ -n "$PAIRUP_CONF_FILE" ]]; then
        conf=$PAIRUP_CONF_FILE
    else
        cat <<EOS
You need a $PAIRUP_CONF file like:

    confs/rkingy-pairup-conf.sh

EOS
        while [[ -z "$conf" ]]; do
            echo -n "Enter a pairup conf file name: "
            read conf
        done
    fi
    cp $conf $PAIRUP_CONF
}

function do_init() {
    assert_not_init
    assert_conf
    change_home

    if [[ -n "$PAIRUP_SSH_KNOWN_HOSTS" ]]; then
        echo $PAIRUP_SSH_KNOWN_HOSTS > /app/.ssh/known_hosts
    fi
    if [[ -n "PAIRUP_SSH_CONFIG" ]]; then
        echo $PAIRUP_SSH_CONFIG > /app/.ssh/config
    fi
    if [[ -n "$PAIRUP_DOTS_CONF_REPO" ]]; then
        mkdir ~/src
        cd ~/src
        git clone $PAIRUP_DOTS_CONF_REPO
        dir=`echo $PAIRUP_DOTS_CONF_REPO | sed 's/.*\/\(.*\)\.git$/\1/'`
        echo $dir/configure
        $dir/configure
        ~/.../bin/... install
    fi
    if [[ -n $PAIRUP_INIT_POST_COMMANDS ]]; then
        $PAIRUP_INIT_POST_COMMANDS
    fi
}

function do_start() {
    assert_not_started
    assert_init
    change_home

    # Prep is done
    source $PAIRUP_START
}

function do_update() {
    assert_init
    change_home
    time source $PAIRUP_UPDATE
}

#------------------------------------------------------------------------------
function is_init() {
    # Check is setup has happened
    if [[ `ls -a $PAIRUP_HOME | grep -c '.'` -gt 2 ]]; then
        echo 1
    fi
}

function change_home() {
    # Switch HOME dirs
    [[ ! -d $PAIRUP_HOME ]] &&
        sudo mkdir $PAIRUP_HOME &&
	sudo chown $PAIRUP_USER.$PAIRUP_GROUP $PAIRUP_HOME
    export HOME=$PAIRUP_HOME
    cd
}

#------------------------------------------------------------------------------
function assert_conf() {
    if [[ ! -f $PAIRUP_CONF ]]; then
        echo "No '$PAIRUP_CONF' file. Cannot continue."
        exit 1
    fi
    source $PAIRUP_CONF
}

function assert_not_started() {
    # Check if already started
    if [[ -n "$PAIRUP_STARTED" ]]; then
        echo "You are already inside a PairUp! session."
        exit 1
    fi
    export PAIRUP_STARTED=1
}

function assert_init() {
    if [[ ! -d $PAIRUP_CONF ]]; then
        cat <<EOS
'$PAIRUP_CONF' does not exist. Run this command:

    pairup init [<dot-confs-repo>]

EOS
        exit 1
    fi
    if [[ -z $(is_init) ]]; then
        cat <<EOS
PairUp! environment not set up.
Run 'pairup init' first.
EOS
        exit 1
    fi
}

function assert_not_init {
    if [[ -n $(is_init) ]]; then
        cat <<EOS
PairUp! environment already set up.
EOS
        exit 1
    fi
}

#------------------------------------------------------------------------------

if [[ -n "$1" ]]; then
    command="$1"
    shift
else
    command="start"
fi
arg1="$1"
[[ $command == '-?' ]] || [[ $command == '-h' ]] ||
    [[ $command == '--help' ]] && command="help"
do_$command
